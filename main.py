import tkinter as tk
import vk_api
import random
import threading
import time



class StatusUpdater:
    def __init__(self, access_token, console, status, interval=10):
        self.access_token = access_token
        self.console = console
        self.status = status
        self.interval = interval  # –∏–∑–º–µ–Ω—è–µ–º interval –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥
        self.stop_flag = False

    def start(self):
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç VK
        vk_session = vk_api.VkApi(token=self.access_token)
        vk = vk_session.get_api()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
        try:
            vk.users.get(user_ids=1)
            self.status.set("–¢–æ–∫–µ–Ω –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ –≤–µ—Ä–µ–Ω!")
        except vk_api.exceptions.ApiError:
            self.status.set("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω")
            return

        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥—ã–µ self.interval —Å–µ–∫—É–Ω–¥
        while True:
            self.update_status(vk)
            time.sleep(self.interval)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–∏–∫–ª–∞
            if self.stop_flag:
                break

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏
        self.stop_flag = False

    def stop(self):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–∏–∫–ª–∞
        self.stop_flag = True

    def update_status(self, vk):
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–º–∞–π–ª–∏–∫–æ–≤
        smileys = ['üòä', 'üòÑ', 'üòã', 'üòö', 'üòç', 'üòª', 'ü•∞', 'üòé', 'üòá', 'ü§©', 'ü§î', 'üò¥', 'üòú', 'ü§Ø', 'üòá', 'üòâ', 'ü§§', 'üôÉ', 'üëÄ', 'üëç', 'üëå', 'ü§ô', 'ü§ò', 'ü•≥', 'üò≥', 'üí©', 'ü§∑‚Äç‚ôÇÔ∏è', 'ü§∑‚Äç‚ôÄÔ∏è', 'üôà']

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–º–∞–π–ª–∏–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        random_smiley = random.choice(smileys)
        old_status = vk.status.get()['text']
        vk.status.set(text=random_smiley)
        new_status = vk.status.get()['text']
        self.console.insert(tk.END, f'Status updated: {old_status} -> {new_status}\n')

    def delete_status(self, vk):
        vk.status.set()

    def set_interval(self, interval):
        self.interval = interval


# ... –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥

def start_cycle():
    # –ü–æ–ª—É—á–∞–µ–º access token –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ü–∏–∫–ª–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    access_token = token_entry.get().strip()
    interval = int(interval_entry.get().strip())

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç StatusUpdater –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤ –Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
    global status_updater  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä–µ–∫—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    status_updater = StatusUpdater(access_token, console, status, interval)
    thread = threading.Thread(target=status_updater.start)
    thread.daemon = True
    thread.start()

def stop_cycle():
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–∏–∫–ª
    if status_updater:
        status_updater.stop()
        console.insert(tk.END, '–¶–∏–∫–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n')

def delete_status():
    # –ü–æ–ª—É—á–∞–µ–º access token
    access_token = token_entry.get().strip()

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç VK
    vk_session = vk_api.VkApi(token=access_token)
    vk = vk_session.get_api()

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    vk.status.set()

    # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
    console.insert(tk.END, '–°—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω\n')

def set_cycle_interval():
    # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Ü–∏–∫–ª–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    dialog = CycleIntervalDialog(root)
    interval = dialog.show()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ StatusUpdater
    if status_updater and interval is not None:
        status_updater.set_interval(interval)
        console.insert(tk.END, f'–ò–Ω—Ç–µ—Ä–≤–∞–ª —Ü–∏–∫–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {interval} —Å–µ–∫—É–Ω–¥\n')

class CycleIntervalDialog:
    def __init__(self, parent):
        self.parent = parent
        self.top = tk.Toplevel(parent)
        self.top.title('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–∏–∫–ª–∞')
        self.top.geometry("200x100")
        self.top.transient(parent)
        self.top.grab_set()

        self.label = tk.Label(self.top, text='–ò–Ω—Ç–µ—Ä–≤–∞–ª —Ü–∏–∫–ª–∞ (—Å–µ–∫—É–Ω–¥—ã):')  # –∏–∑–º–µ–Ω—è–µ–º label
        self.label.pack(padx=10, pady=10)

        self.entry = tk.Entry(self.top, width=10)
        self.entry.pack(padx=10, pady=5)

        self.unit_label = tk.Label(self.top, text='sec')  # –¥–æ–±–∞–≤–ª—è–µ–º unit_label
        self.unit_label.pack(padx=10, pady=5)

        self.ok_button = tk.Button(self.top, text='OK', command=self.ok)
        self.ok_button.pack(padx=10, pady=5)

    def ok(self):
        try:
            interval = int(self.entry.get())
            self.top.destroy()
            self.result = interval
        except ValueError:
            self.label.config(text='–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞')

    def show(self):
        self.result = None
        self.parent.wait_window(self.top)
        return self.result

# –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –æ–∫–Ω–æ
root = tk.Tk()
root.title('–°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ VK')
root.geometry("500x500")

# –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
token_label = tk.Label(root, text='–í–≤–µ–¥–∏—Ç–µ access token:')
token_entry = tk.Entry(root, width=50)
interval_label = tk.Label(root, text='–ò–Ω—Ç–µ—Ä–≤–∞–ª —Ü–∏–∫–ª–∞ (—Å–µ–∫—É–Ω–¥—ã):')
interval_entry = tk.Entry(root, width=10)
start_button = tk.Button(root, text='–ù–∞—á–∞—Ç—å —Ü–∏–∫–ª', command=start_cycle)
stop_button = tk.Button(root, text='–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–∏–∫–ª', command=stop_cycle)
delete_button = tk.Button(root, text='–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å', command=delete_status)
set_interval_button = tk.Button(root, text='–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ü–∏–∫–ª', command=set_cycle_interval)
status = tk.StringVar()
status.set("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ü–∏–∫–ª–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å —Ü–∏–∫–ª'")  # –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ü–∏–∫–ª–∞
status_label = tk.Label(root, textvariable=status)

# –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
console_label = tk.Label(root, text='–ö–æ–Ω—Å–æ–ª—å:')
console = tk.Text(root, width=50, height=10)

# –†–∞–∑–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
token_label.grid(row=0, column=0, padx=10, pady=10)
token_entry.grid(row=0, column=1, padx=10, pady=10)
interval_label.grid(row=1, column=0, padx=10, pady=10)
interval_entry.grid(row=1, column=1, padx=10, pady=10)
start_button.grid(row=2, column=0, padx=10, pady=10)
stop_button.grid(row=2, column=1, padx=10, pady=10)
delete_button.grid(row=3, column=0, padx=10, pady=10)
set_interval_button.grid(row=3, column=1, padx=10, pady=10)
status_label.grid(row=4, column=0, columnspan=2, padx=10, pady=10)
console_label.grid(row=5, column=0, padx=10, pady=10)
console.grid(row=6, column=0, columnspan=2, padx=10, pady=10)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é status_updater
status_updater = None

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
root.mainloop() 